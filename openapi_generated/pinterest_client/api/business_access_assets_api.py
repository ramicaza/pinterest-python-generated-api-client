"""
    Pinterest REST API

    Pinterest's REST API  # noqa: E501

    The version of the OpenAPI document: 5.14.0
    Contact: pinterest-api@pinterest.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from openapi_generated.pinterest_client.api_client import ApiClient, Endpoint as _Endpoint
from openapi_generated.pinterest_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from openapi_generated.pinterest_client.model.asset_id_permissions import AssetIdPermissions
from openapi_generated.pinterest_client.model.create_asset_group_body import CreateAssetGroupBody
from openapi_generated.pinterest_client.model.create_asset_group_response import CreateAssetGroupResponse
from openapi_generated.pinterest_client.model.delete_asset_group_body import DeleteAssetGroupBody
from openapi_generated.pinterest_client.model.delete_asset_group_response import DeleteAssetGroupResponse
from openapi_generated.pinterest_client.model.delete_member_access_results_response_array import DeleteMemberAccessResultsResponseArray
from openapi_generated.pinterest_client.model.delete_partner_asset_access_body import DeletePartnerAssetAccessBody
from openapi_generated.pinterest_client.model.delete_partner_assets_results_response_array import DeletePartnerAssetsResultsResponseArray
from openapi_generated.pinterest_client.model.error import Error
from openapi_generated.pinterest_client.model.get_business_assets_response import GetBusinessAssetsResponse
from openapi_generated.pinterest_client.model.get_partner_assets_response import GetPartnerAssetsResponse
from openapi_generated.pinterest_client.model.inline_object import InlineObject
from openapi_generated.pinterest_client.model.paginated import Paginated
from openapi_generated.pinterest_client.model.permissions_with_owner import PermissionsWithOwner
from openapi_generated.pinterest_client.model.update_asset_group_body import UpdateAssetGroupBody
from openapi_generated.pinterest_client.model.update_asset_group_response import UpdateAssetGroupResponse
from openapi_generated.pinterest_client.model.update_member_asset_access_body import UpdateMemberAssetAccessBody
from openapi_generated.pinterest_client.model.update_member_assets_results_response_array import UpdateMemberAssetsResultsResponseArray
from openapi_generated.pinterest_client.model.update_partner_asset_access_body import UpdatePartnerAssetAccessBody
from openapi_generated.pinterest_client.model.update_partner_assets_results_response_array import UpdatePartnerAssetsResultsResponseArray
from openapi_generated.pinterest_client.model.user_single_asset_binding import UserSingleAssetBinding


class BusinessAccessAssetsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.asset_group_create_endpoint = _Endpoint(
            settings={
                'response_type': (CreateAssetGroupResponse,),
                'auth': [
                    'pinterest_oauth2'
                ],
                'endpoint_path': '/businesses/{business_id}/asset_groups',
                'operation_id': 'asset_group_create',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'business_id',
                    'create_asset_group_body',
                ],
                'required': [
                    'business_id',
                    'create_asset_group_body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'business_id',
                ]
            },
            root_map={
                'validations': {
                    ('business_id',): {
                        'max_length': 20,
                        'min_length': 1,
                        'regex': {
                            'pattern': r'^\d+$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'business_id':
                        (str,),
                    'create_asset_group_body':
                        (CreateAssetGroupBody,),
                },
                'attribute_map': {
                    'business_id': 'business_id',
                },
                'location_map': {
                    'business_id': 'path',
                    'create_asset_group_body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.asset_group_delete_endpoint = _Endpoint(
            settings={
                'response_type': (DeleteAssetGroupResponse,),
                'auth': [
                    'pinterest_oauth2'
                ],
                'endpoint_path': '/businesses/{business_id}/asset_groups',
                'operation_id': 'asset_group_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'business_id',
                    'delete_asset_group_body',
                ],
                'required': [
                    'business_id',
                    'delete_asset_group_body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'business_id',
                ]
            },
            root_map={
                'validations': {
                    ('business_id',): {
                        'max_length': 20,
                        'min_length': 1,
                        'regex': {
                            'pattern': r'^\d+$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'business_id':
                        (str,),
                    'delete_asset_group_body':
                        (DeleteAssetGroupBody,),
                },
                'attribute_map': {
                    'business_id': 'business_id',
                },
                'location_map': {
                    'business_id': 'path',
                    'delete_asset_group_body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.asset_group_update_endpoint = _Endpoint(
            settings={
                'response_type': (UpdateAssetGroupResponse,),
                'auth': [
                    'pinterest_oauth2'
                ],
                'endpoint_path': '/businesses/{business_id}/asset_groups',
                'operation_id': 'asset_group_update',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'business_id',
                    'update_asset_group_body',
                ],
                'required': [
                    'business_id',
                    'update_asset_group_body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'business_id',
                ]
            },
            root_map={
                'validations': {
                    ('business_id',): {
                        'max_length': 20,
                        'min_length': 1,
                        'regex': {
                            'pattern': r'^\d+$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'business_id':
                        (str,),
                    'update_asset_group_body':
                        (UpdateAssetGroupBody,),
                },
                'attribute_map': {
                    'business_id': 'business_id',
                },
                'location_map': {
                    'business_id': 'path',
                    'update_asset_group_body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.business_asset_members_get_endpoint = _Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str, none_type,),
                'auth': [
                    'pinterest_oauth2'
                ],
                'endpoint_path': '/businesses/{business_id}/assets/{asset_id}/members',
                'operation_id': 'business_asset_members_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'business_id',
                    'asset_id',
                    'bookmark',
                    'page_size',
                    'start_index',
                ],
                'required': [
                    'business_id',
                    'asset_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'business_id',
                    'asset_id',
                    'page_size',
                    'start_index',
                ]
            },
            root_map={
                'validations': {
                    ('business_id',): {
                        'max_length': 20,
                        'min_length': 1,
                        'regex': {
                            'pattern': r'^\d+$',  # noqa: E501
                        },
                    },
                    ('asset_id',): {
                        'max_length': 20,
                        'min_length': 1,
                        'regex': {
                            'pattern': r'^\d+$',  # noqa: E501
                        },
                    },
                    ('page_size',): {

                        'inclusive_maximum': 250,
                        'inclusive_minimum': 1,
                    },
                    ('start_index',): {

                        'inclusive_minimum': 0,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'business_id':
                        (str,),
                    'asset_id':
                        (str,),
                    'bookmark':
                        (str,),
                    'page_size':
                        (int,),
                    'start_index':
                        (int,),
                },
                'attribute_map': {
                    'business_id': 'business_id',
                    'asset_id': 'asset_id',
                    'bookmark': 'bookmark',
                    'page_size': 'page_size',
                    'start_index': 'start_index',
                },
                'location_map': {
                    'business_id': 'path',
                    'asset_id': 'path',
                    'bookmark': 'query',
                    'page_size': 'query',
                    'start_index': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.business_asset_partners_get_endpoint = _Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str, none_type,),
                'auth': [
                    'pinterest_oauth2'
                ],
                'endpoint_path': '/businesses/{business_id}/assets/{asset_id}/partners',
                'operation_id': 'business_asset_partners_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'business_id',
                    'asset_id',
                    'start_index',
                    'bookmark',
                    'page_size',
                ],
                'required': [
                    'business_id',
                    'asset_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'business_id',
                    'asset_id',
                    'start_index',
                    'page_size',
                ]
            },
            root_map={
                'validations': {
                    ('business_id',): {
                        'max_length': 20,
                        'min_length': 1,
                        'regex': {
                            'pattern': r'^\d+$',  # noqa: E501
                        },
                    },
                    ('asset_id',): {
                        'max_length': 20,
                        'min_length': 1,
                        'regex': {
                            'pattern': r'^\d+$',  # noqa: E501
                        },
                    },
                    ('start_index',): {

                        'inclusive_minimum': 0,
                    },
                    ('page_size',): {

                        'inclusive_maximum': 250,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'business_id':
                        (str,),
                    'asset_id':
                        (str,),
                    'start_index':
                        (int,),
                    'bookmark':
                        (str,),
                    'page_size':
                        (int,),
                },
                'attribute_map': {
                    'business_id': 'business_id',
                    'asset_id': 'asset_id',
                    'start_index': 'start_index',
                    'bookmark': 'bookmark',
                    'page_size': 'page_size',
                },
                'location_map': {
                    'business_id': 'path',
                    'asset_id': 'path',
                    'start_index': 'query',
                    'bookmark': 'query',
                    'page_size': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.business_assets_get_endpoint = _Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str, none_type,),
                'auth': [
                    'pinterest_oauth2'
                ],
                'endpoint_path': '/businesses/{business_id}/assets',
                'operation_id': 'business_assets_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'business_id',
                    'permissions',
                    'child_asset_id',
                    'asset_group_id',
                    'asset_type',
                    'start_index',
                    'bookmark',
                    'page_size',
                ],
                'required': [
                    'business_id',
                ],
                'nullable': [
                ],
                'enum': [
                    'asset_type',
                ],
                'validation': [
                    'business_id',
                    'child_asset_id',
                    'asset_group_id',
                    'start_index',
                    'page_size',
                ]
            },
            root_map={
                'validations': {
                    ('business_id',): {
                        'max_length': 20,
                        'min_length': 1,
                        'regex': {
                            'pattern': r'^\d+$',  # noqa: E501
                        },
                    },
                    ('child_asset_id',): {
                        'max_length': 20,
                        'min_length': 1,
                        'regex': {
                            'pattern': r'^\d+$',  # noqa: E501
                        },
                    },
                    ('asset_group_id',): {
                        'max_length': 20,
                        'min_length': 1,
                        'regex': {
                            'pattern': r'^\d+$',  # noqa: E501
                        },
                    },
                    ('start_index',): {

                        'inclusive_minimum': 0,
                    },
                    ('page_size',): {

                        'inclusive_maximum': 250,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                    ('asset_type',): {

                        "AD_ACCOUNT": "AD_ACCOUNT",
                        "PROFILE": "PROFILE",
                        "ASSET_GROUP": "ASSET_GROUP"
                    },
                },
                'openapi_types': {
                    'business_id':
                        (str,),
                    'permissions':
                        ([PermissionsWithOwner],),
                    'child_asset_id':
                        (str,),
                    'asset_group_id':
                        (str,),
                    'asset_type':
                        (str,),
                    'start_index':
                        (int,),
                    'bookmark':
                        (str,),
                    'page_size':
                        (int,),
                },
                'attribute_map': {
                    'business_id': 'business_id',
                    'permissions': 'permissions',
                    'child_asset_id': 'child_asset_id',
                    'asset_group_id': 'asset_group_id',
                    'asset_type': 'asset_type',
                    'start_index': 'start_index',
                    'bookmark': 'bookmark',
                    'page_size': 'page_size',
                },
                'location_map': {
                    'business_id': 'path',
                    'permissions': 'query',
                    'child_asset_id': 'query',
                    'asset_group_id': 'query',
                    'asset_type': 'query',
                    'start_index': 'query',
                    'bookmark': 'query',
                    'page_size': 'query',
                },
                'collection_format_map': {
                    'permissions': 'multi',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.business_member_assets_get_endpoint = _Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str, none_type,),
                'auth': [
                    'pinterest_oauth2'
                ],
                'endpoint_path': '/businesses/{business_id}/members/{member_id}/assets',
                'operation_id': 'business_member_assets_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'business_id',
                    'member_id',
                    'asset_type',
                    'start_index',
                    'bookmark',
                    'page_size',
                ],
                'required': [
                    'business_id',
                    'member_id',
                ],
                'nullable': [
                ],
                'enum': [
                    'asset_type',
                ],
                'validation': [
                    'business_id',
                    'member_id',
                    'start_index',
                    'page_size',
                ]
            },
            root_map={
                'validations': {
                    ('business_id',): {
                        'max_length': 20,
                        'min_length': 1,
                        'regex': {
                            'pattern': r'^\d+$',  # noqa: E501
                        },
                    },
                    ('member_id',): {
                        'max_length': 20,
                        'min_length': 1,
                        'regex': {
                            'pattern': r'^\d+$',  # noqa: E501
                        },
                    },
                    ('start_index',): {

                        'inclusive_minimum': 0,
                    },
                    ('page_size',): {

                        'inclusive_maximum': 250,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                    ('asset_type',): {

                        "AD_ACCOUNT": "AD_ACCOUNT",
                        "PROFILE": "PROFILE",
                        "ASSET_GROUP": "ASSET_GROUP"
                    },
                },
                'openapi_types': {
                    'business_id':
                        (str,),
                    'member_id':
                        (str,),
                    'asset_type':
                        (str,),
                    'start_index':
                        (int,),
                    'bookmark':
                        (str,),
                    'page_size':
                        (int,),
                },
                'attribute_map': {
                    'business_id': 'business_id',
                    'member_id': 'member_id',
                    'asset_type': 'asset_type',
                    'start_index': 'start_index',
                    'bookmark': 'bookmark',
                    'page_size': 'page_size',
                },
                'location_map': {
                    'business_id': 'path',
                    'member_id': 'path',
                    'asset_type': 'query',
                    'start_index': 'query',
                    'bookmark': 'query',
                    'page_size': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.business_members_asset_access_delete_endpoint = _Endpoint(
            settings={
                'response_type': (DeleteMemberAccessResultsResponseArray,),
                'auth': [
                    'pinterest_oauth2'
                ],
                'endpoint_path': '/businesses/{business_id}/members/assets/access',
                'operation_id': 'business_members_asset_access_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'business_id',
                    'inline_object',
                ],
                'required': [
                    'business_id',
                    'inline_object',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'business_id',
                ]
            },
            root_map={
                'validations': {
                    ('business_id',): {
                        'max_length': 20,
                        'min_length': 1,
                        'regex': {
                            'pattern': r'^\d+$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'business_id':
                        (str,),
                    'inline_object':
                        (InlineObject,),
                },
                'attribute_map': {
                    'business_id': 'business_id',
                },
                'location_map': {
                    'business_id': 'path',
                    'inline_object': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.business_members_asset_access_update_endpoint = _Endpoint(
            settings={
                'response_type': (UpdateMemberAssetsResultsResponseArray,),
                'auth': [
                    'pinterest_oauth2'
                ],
                'endpoint_path': '/businesses/{business_id}/members/assets/access',
                'operation_id': 'business_members_asset_access_update',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'business_id',
                    'update_member_asset_access_body',
                ],
                'required': [
                    'business_id',
                    'update_member_asset_access_body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'business_id',
                ]
            },
            root_map={
                'validations': {
                    ('business_id',): {
                        'max_length': 20,
                        'min_length': 1,
                        'regex': {
                            'pattern': r'^\d+$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'business_id':
                        (str,),
                    'update_member_asset_access_body':
                        (UpdateMemberAssetAccessBody,),
                },
                'attribute_map': {
                    'business_id': 'business_id',
                },
                'location_map': {
                    'business_id': 'path',
                    'update_member_asset_access_body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.business_partner_asset_access_get_endpoint = _Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str, none_type,),
                'auth': [
                    'pinterest_oauth2'
                ],
                'endpoint_path': '/businesses/{business_id}/partners/{partner_id}/assets',
                'operation_id': 'business_partner_asset_access_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'business_id',
                    'partner_id',
                    'partner_type',
                    'asset_type',
                    'start_index',
                    'page_size',
                    'bookmark',
                ],
                'required': [
                    'business_id',
                    'partner_id',
                ],
                'nullable': [
                ],
                'enum': [
                    'asset_type',
                ],
                'validation': [
                    'business_id',
                    'partner_id',
                    'start_index',
                    'page_size',
                ]
            },
            root_map={
                'validations': {
                    ('business_id',): {
                        'max_length': 20,
                        'min_length': 1,
                        'regex': {
                            'pattern': r'^\d+$',  # noqa: E501
                        },
                    },
                    ('partner_id',): {
                        'max_length': 20,
                        'min_length': 1,
                        'regex': {
                            'pattern': r'^\d+$',  # noqa: E501
                        },
                    },
                    ('start_index',): {

                        'inclusive_minimum': 0,
                    },
                    ('page_size',): {

                        'inclusive_maximum': 250,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                    ('asset_type',): {

                        "AD_ACCOUNT": "AD_ACCOUNT",
                        "PROFILE": "PROFILE",
                        "ASSET_GROUP": "ASSET_GROUP"
                    },
                },
                'openapi_types': {
                    'business_id':
                        (str,),
                    'partner_id':
                        (str,),
                    'partner_type':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'asset_type':
                        (str,),
                    'start_index':
                        (int,),
                    'page_size':
                        (int,),
                    'bookmark':
                        (str,),
                },
                'attribute_map': {
                    'business_id': 'business_id',
                    'partner_id': 'partner_id',
                    'partner_type': 'partner_type',
                    'asset_type': 'asset_type',
                    'start_index': 'start_index',
                    'page_size': 'page_size',
                    'bookmark': 'bookmark',
                },
                'location_map': {
                    'business_id': 'path',
                    'partner_id': 'path',
                    'partner_type': 'query',
                    'asset_type': 'query',
                    'start_index': 'query',
                    'page_size': 'query',
                    'bookmark': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_partner_asset_access_handler_impl_endpoint = _Endpoint(
            settings={
                'response_type': (DeletePartnerAssetsResultsResponseArray,),
                'auth': [
                    'pinterest_oauth2'
                ],
                'endpoint_path': '/businesses/{business_id}/partners/assets',
                'operation_id': 'delete_partner_asset_access_handler_impl',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'business_id',
                    'delete_partner_asset_access_body',
                ],
                'required': [
                    'business_id',
                    'delete_partner_asset_access_body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'business_id',
                ]
            },
            root_map={
                'validations': {
                    ('business_id',): {
                        'max_length': 20,
                        'min_length': 1,
                        'regex': {
                            'pattern': r'^\d+$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'business_id':
                        (str,),
                    'delete_partner_asset_access_body':
                        (DeletePartnerAssetAccessBody,),
                },
                'attribute_map': {
                    'business_id': 'business_id',
                },
                'location_map': {
                    'business_id': 'path',
                    'delete_partner_asset_access_body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.update_partner_asset_access_handler_impl_endpoint = _Endpoint(
            settings={
                'response_type': (UpdatePartnerAssetsResultsResponseArray,),
                'auth': [
                    'pinterest_oauth2'
                ],
                'endpoint_path': '/businesses/{business_id}/partners/assets',
                'operation_id': 'update_partner_asset_access_handler_impl',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'business_id',
                    'update_partner_asset_access_body',
                ],
                'required': [
                    'business_id',
                    'update_partner_asset_access_body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'business_id',
                ]
            },
            root_map={
                'validations': {
                    ('business_id',): {
                        'max_length': 20,
                        'min_length': 1,
                        'regex': {
                            'pattern': r'^\d+$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'business_id':
                        (str,),
                    'update_partner_asset_access_body':
                        (UpdatePartnerAssetAccessBody,),
                },
                'attribute_map': {
                    'business_id': 'business_id',
                },
                'location_map': {
                    'business_id': 'path',
                    'update_partner_asset_access_body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )

    def asset_group_create(
        self,
        business_id,
        create_asset_group_body,
        **kwargs
    ):
        """Create a new asset group.  # noqa: E501

        Create a new asset group with the specified parameters. - An <a href=\"https://help.pinterest.com/en/business/article/asset-groups\">asset group</a> is a custom group of assets based on how you’d like to manage your accounts.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.asset_group_create(business_id, create_asset_group_body, async_req=True)
        >>> result = thread.get()

        Args:
            business_id (str): Unique identifier of the requesting business.
            create_asset_group_body (CreateAssetGroupBody):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            CreateAssetGroupResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['business_id'] = \
            business_id
        kwargs['create_asset_group_body'] = \
            create_asset_group_body
        return self.asset_group_create_endpoint.call_with_http_info(**kwargs)

    def asset_group_delete(
        self,
        business_id,
        delete_asset_group_body,
        **kwargs
    ):
        """Delete asset groups.  # noqa: E501

        Delete a batch of asset groups.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.asset_group_delete(business_id, delete_asset_group_body, async_req=True)
        >>> result = thread.get()

        Args:
            business_id (str): Unique identifier of the requesting business.
            delete_asset_group_body (DeleteAssetGroupBody):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            DeleteAssetGroupResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['business_id'] = \
            business_id
        kwargs['delete_asset_group_body'] = \
            delete_asset_group_body
        return self.asset_group_delete_endpoint.call_with_http_info(**kwargs)

    def asset_group_update(
        self,
        business_id,
        update_asset_group_body,
        **kwargs
    ):
        """Update asset groups.  # noqa: E501

        Update a batch of asset groups with the specified parameters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.asset_group_update(business_id, update_asset_group_body, async_req=True)
        >>> result = thread.get()

        Args:
            business_id (str): Unique identifier of the requesting business.
            update_asset_group_body (UpdateAssetGroupBody):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            UpdateAssetGroupResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['business_id'] = \
            business_id
        kwargs['update_asset_group_body'] = \
            update_asset_group_body
        return self.asset_group_update_endpoint.call_with_http_info(**kwargs)

    def business_asset_members_get(
        self,
        business_id,
        asset_id,
        **kwargs
    ):
        """Get members with access to asset  # noqa: E501

        Get all the members the requesting business has granted access to on the given asset.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.business_asset_members_get(business_id, asset_id, async_req=True)
        >>> result = thread.get()

        Args:
            business_id (str): Unique identifier of the requesting business.
            asset_id (str): Unique identifier of a business asset.

        Keyword Args:
            bookmark (str): Cursor used to fetch the next page of items. [optional]
            page_size (int): Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/reference/pagination/'>Pagination</a> for more information.. [optional] if omitted the server will use the default value of 25
            start_index (int): An index to start fetching the results from. Only the results starting from this index will be returned.. [optional] if omitted the server will use the default value of 0
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            bool, date, datetime, dict, float, int, list, str, none_type
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['business_id'] = \
            business_id
        kwargs['asset_id'] = \
            asset_id
        return self.business_asset_members_get_endpoint.call_with_http_info(**kwargs)

    def business_asset_partners_get(
        self,
        business_id,
        asset_id,
        **kwargs
    ):
        """Get partners with access to asset  # noqa: E501

        Get all the partners the requesting business has granted access to on the given asset. Note: If the asset has been shared with you, an empty array will be returned. This is because an asset shared with you cannot be shared with a different partner.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.business_asset_partners_get(business_id, asset_id, async_req=True)
        >>> result = thread.get()

        Args:
            business_id (str): Unique identifier of the requesting business.
            asset_id (str): Unique identifier of a business asset.

        Keyword Args:
            start_index (int): An index to start fetching the results from. Only the results starting from this index will be returned.. [optional] if omitted the server will use the default value of 0
            bookmark (str): Cursor used to fetch the next page of items. [optional]
            page_size (int): Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/reference/pagination/'>Pagination</a> for more information.. [optional] if omitted the server will use the default value of 25
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            bool, date, datetime, dict, float, int, list, str, none_type
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['business_id'] = \
            business_id
        kwargs['asset_id'] = \
            asset_id
        return self.business_asset_partners_get_endpoint.call_with_http_info(**kwargs)

    def business_assets_get(
        self,
        business_id,
        **kwargs
    ):
        """List business assets  # noqa: E501

        Get all the assets the requesting business has access to. This includes assets the business owns and assets the business has access to through partnerships.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.business_assets_get(business_id, async_req=True)
        >>> result = thread.get()

        Args:
            business_id (str): Unique identifier of the requesting business.

        Keyword Args:
            permissions ([PermissionsWithOwner]): A list of asset permissions used to filter the assets. Only assets where the requesting business has at least one of the specified permissions will be returned.. [optional]
            child_asset_id (str): A child asset unique identifier. Used to fetch asset groups that contain the asset id as a child.. [optional]
            asset_group_id (str): An asset group unique identifier. Used to fetch assets contained within the specified asset group.. [optional]
            asset_type (str): A resource type to filter the assets by. Only assets of the specified type will be returned.. [optional] if omitted the server will use the default value of "AD_ACCOUNT"
            start_index (int): An index to start fetching the results from. Only the results starting from this index will be returned.. [optional] if omitted the server will use the default value of 0
            bookmark (str): Cursor used to fetch the next page of items. [optional]
            page_size (int): Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/reference/pagination/'>Pagination</a> for more information.. [optional] if omitted the server will use the default value of 25
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            bool, date, datetime, dict, float, int, list, str, none_type
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['business_id'] = \
            business_id
        return self.business_assets_get_endpoint.call_with_http_info(**kwargs)

    def business_member_assets_get(
        self,
        business_id,
        member_id,
        **kwargs
    ):
        """Get assets assigned to a member  # noqa: E501

        Get assets on which you assigned asset permissions to the given member. Can be used to: - get all assets, regardless of asset type or - get assets of one asset type by using the asset_type query. The return response will include the permissions the member has to that asset and the asset type.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.business_member_assets_get(business_id, member_id, async_req=True)
        >>> result = thread.get()

        Args:
            business_id (str): Unique identifier of the requesting business.
            member_id (str): The member id to fetch assets for.

        Keyword Args:
            asset_type (str): A resource type to filter the assets by. Only assets of the specified type will be returned.. [optional] if omitted the server will use the default value of "AD_ACCOUNT"
            start_index (int): An index to start fetching the results from. Only the results starting from this index will be returned.. [optional] if omitted the server will use the default value of 0
            bookmark (str): Cursor used to fetch the next page of items. [optional]
            page_size (int): Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/reference/pagination/'>Pagination</a> for more information.. [optional] if omitted the server will use the default value of 25
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            bool, date, datetime, dict, float, int, list, str, none_type
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['business_id'] = \
            business_id
        kwargs['member_id'] = \
            member_id
        return self.business_member_assets_get_endpoint.call_with_http_info(**kwargs)

    def business_members_asset_access_delete(
        self,
        business_id,
        inline_object,
        **kwargs
    ):
        """Delete member access to asset  # noqa: E501

        Terminate multiple members' access to an asset.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.business_members_asset_access_delete(business_id, inline_object, async_req=True)
        >>> result = thread.get()

        Args:
            business_id (str): Unique identifier of the requesting business.
            inline_object (InlineObject):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            DeleteMemberAccessResultsResponseArray
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['business_id'] = \
            business_id
        kwargs['inline_object'] = \
            inline_object
        return self.business_members_asset_access_delete_endpoint.call_with_http_info(**kwargs)

    def business_members_asset_access_update(
        self,
        business_id,
        update_member_asset_access_body,
        **kwargs
    ):
        """Assign/Update member asset permissions  # noqa: E501

        Grant multiple members access to assets and/or update multiple member's exisiting permissions to an asset. Note: Not all listed permissions are applicable to each asset type. For example, PROFILE_PUBLISHER would not be applicable to an asset of type AD_ACCOUNT. The permission level PROFILE_PUBLISHER is only available to an asset of the type PROFILE.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.business_members_asset_access_update(business_id, update_member_asset_access_body, async_req=True)
        >>> result = thread.get()

        Args:
            business_id (str): Unique identifier of the requesting business.
            update_member_asset_access_body (UpdateMemberAssetAccessBody): List of member asset permissions to create or update.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            UpdateMemberAssetsResultsResponseArray
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['business_id'] = \
            business_id
        kwargs['update_member_asset_access_body'] = \
            update_member_asset_access_body
        return self.business_members_asset_access_update_endpoint.call_with_http_info(**kwargs)

    def business_partner_asset_access_get(
        self,
        business_id,
        partner_id,
        **kwargs
    ):
        """Get assets assigned to a partner or assets assigned by a partner  # noqa: E501

        Can be used to get the business assets your partner has granted you access to or the business assets you have granted your partner access to. If you specify: - partner_type=INTERNAL, you will retrieve your business assets that the partner has access to. - partner_type=EXTERNAL, you will retrieve the partner's business assets that the partner has granted you access to.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.business_partner_asset_access_get(business_id, partner_id, async_req=True)
        >>> result = thread.get()

        Args:
            business_id (str): Unique identifier of the requesting business.
            partner_id (str): The partner id to be bound to the Business

        Keyword Args:
            partner_type (bool, date, datetime, dict, float, int, list, str, none_type): Specifies whether to fetch internal or external (shared) partners. If partner_type=INTERNAL, the asset being queried is for accesses the partner has to your business assets.<br> If partner_type=EXTERNAL, the asset being queried is for the accesses you have to the partner's business asset.. [optional]
            asset_type (str): A resource type to filter the assets by. Only assets of the specified type will be returned.. [optional] if omitted the server will use the default value of "AD_ACCOUNT"
            start_index (int): An index to start fetching the results from. Only the results starting from this index will be returned.. [optional] if omitted the server will use the default value of 0
            page_size (int): Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/reference/pagination/'>Pagination</a> for more information.. [optional] if omitted the server will use the default value of 25
            bookmark (str): Cursor used to fetch the next page of items. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            bool, date, datetime, dict, float, int, list, str, none_type
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['business_id'] = \
            business_id
        kwargs['partner_id'] = \
            partner_id
        return self.business_partner_asset_access_get_endpoint.call_with_http_info(**kwargs)

    def delete_partner_asset_access_handler_impl(
        self,
        business_id,
        delete_partner_asset_access_body,
        **kwargs
    ):
        """Delete partner access to asset  # noqa: E501

        Terminate multiple partners' access to an asset. If - partner_type=INTERNAL: You will terminate a partner's asset access to your business assets. - partner_type=EXTERNAL: You will terminate your own access to your partner's business assets.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_partner_asset_access_handler_impl(business_id, delete_partner_asset_access_body, async_req=True)
        >>> result = thread.get()

        Args:
            business_id (str): Unique identifier of the requesting business.
            delete_partner_asset_access_body (DeletePartnerAssetAccessBody):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            DeletePartnerAssetsResultsResponseArray
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['business_id'] = \
            business_id
        kwargs['delete_partner_asset_access_body'] = \
            delete_partner_asset_access_body
        return self.delete_partner_asset_access_handler_impl_endpoint.call_with_http_info(**kwargs)

    def update_partner_asset_access_handler_impl(
        self,
        business_id,
        update_partner_asset_access_body,
        **kwargs
    ):
        """Assign/Update partner asset permissions  # noqa: E501

        Grant multiple partners access to assets and/or update multiple partner's exisiting permissions to an asset. If your partner already had permissions on the asset, they will be overriden with the new permissions you assign to them. To learn more about permission levels, visit https://help.pinterest.com/en/business/article/business-manager-overview  Note: Not all listed permissions are applicable to each asset type. For example, PROFILE_PUBLISHER would not be applicable to an asset of type AD_ACCOUNT. The permission level PROFILE_PUBLISHER is only available to an asset of the type PROFILE.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_partner_asset_access_handler_impl(business_id, update_partner_asset_access_body, async_req=True)
        >>> result = thread.get()

        Args:
            business_id (str): Unique identifier of the requesting business.
            update_partner_asset_access_body (UpdatePartnerAssetAccessBody): A list of assets and permissions to assign to your partners.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            UpdatePartnerAssetsResultsResponseArray
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['business_id'] = \
            business_id
        kwargs['update_partner_asset_access_body'] = \
            update_partner_asset_access_body
        return self.update_partner_asset_access_handler_impl_endpoint.call_with_http_info(**kwargs)

