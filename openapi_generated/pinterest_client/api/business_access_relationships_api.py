"""
    Pinterest REST API

    Pinterest's REST API  # noqa: E501

    The version of the OpenAPI document: 5.14.0
    Contact: pinterest-api@pinterest.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from openapi_generated.pinterest_client.api_client import ApiClient, Endpoint as _Endpoint
from openapi_generated.pinterest_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from openapi_generated.pinterest_client.model.delete_partners_request import DeletePartnersRequest
from openapi_generated.pinterest_client.model.delete_partners_response import DeletePartnersResponse
from openapi_generated.pinterest_client.model.deleted_members_response import DeletedMembersResponse
from openapi_generated.pinterest_client.model.error import Error
from openapi_generated.pinterest_client.model.member_business_role import MemberBusinessRole
from openapi_generated.pinterest_client.model.members_to_delete_body import MembersToDeleteBody
from openapi_generated.pinterest_client.model.paginated import Paginated
from openapi_generated.pinterest_client.model.partner_type import PartnerType
from openapi_generated.pinterest_client.model.update_member_business_role_body import UpdateMemberBusinessRoleBody
from openapi_generated.pinterest_client.model.update_member_results_response_array import UpdateMemberResultsResponseArray
from openapi_generated.pinterest_client.model.user_business_role_binding import UserBusinessRoleBinding


class BusinessAccessRelationshipsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.delete_business_membership_endpoint = _Endpoint(
            settings={
                'response_type': (DeletedMembersResponse,),
                'auth': [
                    'pinterest_oauth2'
                ],
                'endpoint_path': '/businesses/{business_id}/members',
                'operation_id': 'delete_business_membership',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'business_id',
                    'members_to_delete_body',
                ],
                'required': [
                    'business_id',
                    'members_to_delete_body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'business_id',
                ]
            },
            root_map={
                'validations': {
                    ('business_id',): {
                        'max_length': 20,
                        'min_length': 1,
                        'regex': {
                            'pattern': r'^\d+$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'business_id':
                        (str,),
                    'members_to_delete_body':
                        (MembersToDeleteBody,),
                },
                'attribute_map': {
                    'business_id': 'business_id',
                },
                'location_map': {
                    'business_id': 'path',
                    'members_to_delete_body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.delete_business_partners_endpoint = _Endpoint(
            settings={
                'response_type': (DeletePartnersResponse,),
                'auth': [
                    'pinterest_oauth2'
                ],
                'endpoint_path': '/businesses/{business_id}/partners',
                'operation_id': 'delete_business_partners',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'business_id',
                    'delete_partners_request',
                ],
                'required': [
                    'business_id',
                    'delete_partners_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'business_id',
                ]
            },
            root_map={
                'validations': {
                    ('business_id',): {
                        'max_length': 20,
                        'min_length': 1,
                        'regex': {
                            'pattern': r'^\d+$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'business_id':
                        (str,),
                    'delete_partners_request':
                        (DeletePartnersRequest,),
                },
                'attribute_map': {
                    'business_id': 'business_id',
                },
                'location_map': {
                    'business_id': 'path',
                    'delete_partners_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.get_business_employers_endpoint = _Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str, none_type,),
                'auth': [
                    'pinterest_oauth2'
                ],
                'endpoint_path': '/businesses/employers',
                'operation_id': 'get_business_employers',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'page_size',
                    'bookmark',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'page_size',
                ]
            },
            root_map={
                'validations': {
                    ('page_size',): {

                        'inclusive_maximum': 250,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'page_size':
                        (int,),
                    'bookmark':
                        (str,),
                },
                'attribute_map': {
                    'page_size': 'page_size',
                    'bookmark': 'bookmark',
                },
                'location_map': {
                    'page_size': 'query',
                    'bookmark': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_business_members_endpoint = _Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str, none_type,),
                'auth': [
                    'pinterest_oauth2'
                ],
                'endpoint_path': '/businesses/{business_id}/members',
                'operation_id': 'get_business_members',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'business_id',
                    'assets_summary',
                    'business_roles',
                    'member_ids',
                    'start_index',
                    'bookmark',
                    'page_size',
                ],
                'required': [
                    'business_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'business_id',
                    'member_ids',
                    'start_index',
                    'page_size',
                ]
            },
            root_map={
                'validations': {
                    ('business_id',): {
                        'max_length': 20,
                        'min_length': 1,
                        'regex': {
                            'pattern': r'^\d+$',  # noqa: E501
                        },
                    },
                    ('member_ids',): {
                        'max_length': 500,
                    },
                    ('start_index',): {

                        'inclusive_minimum': 0,
                    },
                    ('page_size',): {

                        'inclusive_maximum': 250,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'business_id':
                        (str,),
                    'assets_summary':
                        (bool,),
                    'business_roles':
                        ([MemberBusinessRole],),
                    'member_ids':
                        (str,),
                    'start_index':
                        (int,),
                    'bookmark':
                        (str,),
                    'page_size':
                        (int,),
                },
                'attribute_map': {
                    'business_id': 'business_id',
                    'assets_summary': 'assets_summary',
                    'business_roles': 'business_roles',
                    'member_ids': 'member_ids',
                    'start_index': 'start_index',
                    'bookmark': 'bookmark',
                    'page_size': 'page_size',
                },
                'location_map': {
                    'business_id': 'path',
                    'assets_summary': 'query',
                    'business_roles': 'query',
                    'member_ids': 'query',
                    'start_index': 'query',
                    'bookmark': 'query',
                    'page_size': 'query',
                },
                'collection_format_map': {
                    'business_roles': 'multi',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_business_partners_endpoint = _Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str, none_type,),
                'auth': [
                    'pinterest_oauth2'
                ],
                'endpoint_path': '/businesses/{business_id}/partners',
                'operation_id': 'get_business_partners',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'business_id',
                    'assets_summary',
                    'partner_type',
                    'partner_ids',
                    'start_index',
                    'page_size',
                    'bookmark',
                ],
                'required': [
                    'business_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'business_id',
                    'partner_ids',
                    'start_index',
                    'page_size',
                ]
            },
            root_map={
                'validations': {
                    ('business_id',): {
                        'max_length': 20,
                        'min_length': 1,
                        'regex': {
                            'pattern': r'^\d+$',  # noqa: E501
                        },
                    },
                    ('partner_ids',): {
                        'max_length': 500,
                    },
                    ('start_index',): {

                        'inclusive_minimum': 0,
                    },
                    ('page_size',): {

                        'inclusive_maximum': 250,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'business_id':
                        (str,),
                    'assets_summary':
                        (bool,),
                    'partner_type':
                        (PartnerType,),
                    'partner_ids':
                        (str,),
                    'start_index':
                        (int,),
                    'page_size':
                        (int,),
                    'bookmark':
                        (str,),
                },
                'attribute_map': {
                    'business_id': 'business_id',
                    'assets_summary': 'assets_summary',
                    'partner_type': 'partner_type',
                    'partner_ids': 'partner_ids',
                    'start_index': 'start_index',
                    'page_size': 'page_size',
                    'bookmark': 'bookmark',
                },
                'location_map': {
                    'business_id': 'path',
                    'assets_summary': 'query',
                    'partner_type': 'query',
                    'partner_ids': 'query',
                    'start_index': 'query',
                    'page_size': 'query',
                    'bookmark': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.update_business_memberships_endpoint = _Endpoint(
            settings={
                'response_type': (UpdateMemberResultsResponseArray,),
                'auth': [
                    'pinterest_oauth2'
                ],
                'endpoint_path': '/businesses/{business_id}/members',
                'operation_id': 'update_business_memberships',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'business_id',
                    'update_member_business_role_body',
                ],
                'required': [
                    'business_id',
                    'update_member_business_role_body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'business_id',
                    'update_member_business_role_body',
                ]
            },
            root_map={
                'validations': {
                    ('business_id',): {
                        'max_length': 20,
                        'min_length': 1,
                        'regex': {
                            'pattern': r'^\d+$',  # noqa: E501
                        },
                    },
                    ('update_member_business_role_body',): {

                        'min_items': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'business_id':
                        (str,),
                    'update_member_business_role_body':
                        ([UpdateMemberBusinessRoleBody],),
                },
                'attribute_map': {
                    'business_id': 'business_id',
                },
                'location_map': {
                    'business_id': 'path',
                    'update_member_business_role_body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )

    def delete_business_membership(
        self,
        business_id,
        members_to_delete_body,
        **kwargs
    ):
        """Terminate business memberships  # noqa: E501

        Terminate memberships between the specified members and your business.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_business_membership(business_id, members_to_delete_body, async_req=True)
        >>> result = thread.get()

        Args:
            business_id (str): Business id
            members_to_delete_body (MembersToDeleteBody): List of members with role to delete.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            DeletedMembersResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['business_id'] = \
            business_id
        kwargs['members_to_delete_body'] = \
            members_to_delete_body
        return self.delete_business_membership_endpoint.call_with_http_info(**kwargs)

    def delete_business_partners(
        self,
        business_id,
        delete_partners_request,
        **kwargs
    ):
        """Terminate business partnerships  # noqa: E501

        Terminate partnerships between the specified partners and your business. Note: You may only batch terminate partners of the same partner type.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_business_partners(business_id, delete_partners_request, async_req=True)
        >>> result = thread.get()

        Args:
            business_id (str): Unique identifier of the requesting business.
            delete_partners_request (DeletePartnersRequest): An object containing a \"partner_ids\" property composed of a list of partner IDs and a \"partners_type\" property specifying the type of partners to delete. 

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            DeletePartnersResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['business_id'] = \
            business_id
        kwargs['delete_partners_request'] = \
            delete_partners_request
        return self.delete_business_partners_endpoint.call_with_http_info(**kwargs)

    def get_business_employers(
        self,
        **kwargs
    ):
        """List business employers for user  # noqa: E501

        Get all of the viewing user's business employers.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_business_employers(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            page_size (int): Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/reference/pagination/'>Pagination</a> for more information.. [optional] if omitted the server will use the default value of 25
            bookmark (str): Cursor used to fetch the next page of items. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            bool, date, datetime, dict, float, int, list, str, none_type
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.get_business_employers_endpoint.call_with_http_info(**kwargs)

    def get_business_members(
        self,
        business_id,
        **kwargs
    ):
        """Get business members  # noqa: E501

        Get all members of the specified business. The return response will include the member's business_role and assets they have access to if assets_summary=TRUE  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_business_members(business_id, async_req=True)
        >>> result = thread.get()

        Args:
            business_id (str): Unique identifier of the requesting business.

        Keyword Args:
            assets_summary (bool): Include assets summary in the response if this is true.  The assets summary returns a dictionary representing a summary of the assets for the business user ID, with information like the ad accounts and profiles the user has permissions for and what those permissions are. [optional] if omitted the server will use the default value of False
            business_roles ([MemberBusinessRole]): A list of business roles to filter the members by. Only members whose roles are in the specified roles will be returned.. [optional]
            member_ids (str): A list of business members ids separated by comma.. [optional]
            start_index (int): An index to start fetching the results from. Only the results starting from this index will be returned.. [optional] if omitted the server will use the default value of 0
            bookmark (str): Cursor used to fetch the next page of items. [optional]
            page_size (int): Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/reference/pagination/'>Pagination</a> for more information.. [optional] if omitted the server will use the default value of 25
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            bool, date, datetime, dict, float, int, list, str, none_type
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['business_id'] = \
            business_id
        return self.get_business_members_endpoint.call_with_http_info(**kwargs)

    def get_business_partners(
        self,
        business_id,
        **kwargs
    ):
        """Get business partners  # noqa: E501

        Get all partners of the specified business.  If the assets_summary=TRUE and: - partner_type=INTERNAL, the business assets returned are your business assets the partner has access to. - partner_type=EXTERNAL, the business assets returned are your partner's business assets the partner has granted you   access to.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_business_partners(business_id, async_req=True)
        >>> result = thread.get()

        Args:
            business_id (str): Unique identifier of the requesting business.

        Keyword Args:
            assets_summary (bool): Include assets summary in the response if this is true.  The assets summary returns a dictionary representing a summary of the assets for the business user ID, with information like the ad accounts and profiles the user has permissions for and what those permissions are. [optional] if omitted the server will use the default value of False
            partner_type (PartnerType): Specifies whether to fetch internal or external (shared) partners. If partner_type=INTERNAL, the asset being queried is for accesses the partner has to your business assets.<br> If partner_type=EXTERNAL, the asset being queried is for the accesses you have to the partner's business asset.. [optional]
            partner_ids (str): A list of business partner ids separated by commas used to filter the results. Only partners with the specified ids will be returned.. [optional]
            start_index (int): An index to start fetching the results from. Only the results starting from this index will be returned.. [optional] if omitted the server will use the default value of 0
            page_size (int): Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/reference/pagination/'>Pagination</a> for more information.. [optional] if omitted the server will use the default value of 25
            bookmark (str): Cursor used to fetch the next page of items. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            bool, date, datetime, dict, float, int, list, str, none_type
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['business_id'] = \
            business_id
        return self.get_business_partners_endpoint.call_with_http_info(**kwargs)

    def update_business_memberships(
        self,
        business_id,
        update_member_business_role_body,
        **kwargs
    ):
        """Update member's business role  # noqa: E501

        Update a member's business role within the business.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_business_memberships(business_id, update_member_business_role_body, async_req=True)
        >>> result = thread.get()

        Args:
            business_id (str): Business id
            update_member_business_role_body ([UpdateMemberBusinessRoleBody]): List of objects with the member id and the business_role.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            UpdateMemberResultsResponseArray
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['business_id'] = \
            business_id
        kwargs['update_member_business_role_body'] = \
            update_member_business_role_body
        return self.update_business_memberships_endpoint.call_with_http_info(**kwargs)

